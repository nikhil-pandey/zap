Implement the required changes using the available tools. Remember to use as few tool calls as possible. Output CONTINUE after each tool use or ASK FOR FEEDBACK when the task is complete.

Important note on using edit_file:
The edit_file function takes 4 arguments:
1. filename: Annotated[str, "Path to the file to edit"]
2. start_line: Annotated[int, "The starting line number (1-indexed)"]
3. end_line: Annotated[int, "The ending line number (1-indexed)"]
4. content: Annotated[str, "Content to replace in the specified lines"]

When using edit_file, ignore the line numbers in the content and use only the actual code. Pay attention to whitespace, especially leading spaces.

Example of correct edit_file usage:

Certainly. I'll provide a few different examples of using the `edit_file` function with line numbers, showing both the edit command and the expected output. These examples will help illustrate how to handle various editing scenarios while preserving the correct formatting.

Example 1: Replacing a single line

Input file content:
```py
|021|    verbose: bool = False
|022|    agent: str = "chat"
|023|    auto_persist_contexts: bool = True
```

Edit command:
```python
edit_file(
    filename="zap/config.py",
    start_line=22,
    end_line=22,
    content='    agent: str = "gpt-4"\n'
)
```

Resulting output:
```py
|021|    verbose: bool = False
|022|    agent: str = "gpt-4"
|023|    auto_persist_contexts: bool = True
```

Example 2: Replacing multiple consecutive lines

Input file content:
```py
|023|    auto_persist_contexts: bool = True
|024|    auto_archive_contexts: bool = True
|025|    auto_load_contexts: bool = True
```

Edit command:
```python
edit_file(
    filename="zap/config.py",
    start_line=24,
    end_line=25,
    content='    auto_archive_contexts: bool = False\n    auto_load_contexts: bool = False\n'
)
```

Resulting output:
```py
|023|    auto_persist_contexts: bool = True
|024|    auto_archive_contexts: bool = False
|025|    auto_load_contexts: bool = False
```

Example 3: Inserting a new line

Input file content:
```py
|024|    auto_archive_contexts: bool = True
|025|    auto_load_contexts: bool = True
```

Edit command:
```python
edit_file(
    filename="zap/config.py",
    start_line=26,
    end_line=25,
    content='    max_history_size: int = 100\n'
)
```

Resulting output:
```py
|024|    auto_archive_contexts: bool = True
|025|    auto_load_contexts: bool = True
|026|    max_history_size: int = 100
```

Example 4: Deleting lines

Input file content:
```py
|018|    test_command: Optional[str] = None
|019|    dependency_manager: Optional[str] = None
|020|    templates_dir: Optional[str] = None
|021|    verbose: bool = False
```

Edit command:
```python
edit_file(
    filename="zap/config.py",
    start_line=19,
    end_line=20,
    content=''
)
```

Resulting output:
```py
|018|    test_command: Optional[str] = None
|019|    verbose: bool = False
```

Example 5: Replacing a block of code

Input file content:
```py
|028|def load_config(args) -> AppConfig:
|029|    # Load config from config.yaml files in the following order:
|030|    config_paths = [Path.cwd() / "zap_config.yaml"]
|031|    current_path = config_paths[0].parent
|032|
|033|    while current_path != current_path.parent:  # Check if we've reached the root
|034|        current_path = current_path.parent
|035|        config_paths.append(current_path / "zap_config.yaml")
|036|
```

Edit command:
```python
edit_file(
    filename="zap/config.py",
    start_line=28,
    end_line=36,
    content='''def load_config(args) -> AppConfig:
    config_paths = [Path.cwd() / "zap_config.yaml", Path.home() / ".zap_config.yaml"]
    config = {}
    for path in config_paths:
        if path.exists():
            with open(path, "r") as f:
                config.update(yaml.safe_load(f))
            break
'''
)
```

Resulting output:
```py
|028|def load_config(args) -> AppConfig:
|029|    config_paths = [Path.cwd() / "zap_config.yaml", Path.home() / ".zap_config.yaml"]
|030|    config = {}
|031|    for path in config_paths:
|032|        if path.exists():
|033|            with open(path, "r") as f:
|034|                config.update(yaml.safe_load(f))
|035|            break
|036|
```

Task description:
<task>
{{ message }}
</task>
Project context:
- Repository Root: {{ root }}
- OS: {{ os }}
Repository Metadata:
<repoMetadata>
{{ repo_metadata }}
</repoMetadata>
File contents (DO NOT use read_file for these). If you use read_file for these file, you will receive a penalty:
<fileContents>
{{ files }}
</fileContents>